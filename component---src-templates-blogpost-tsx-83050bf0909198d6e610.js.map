{"version":3,"sources":["webpack:///./src/components/StyledContainer.tsx","webpack:///./src/components/SEO.tsx","webpack:///./src/templates/blogpost.tsx","webpack:///./src/components/Card.tsx"],"names":["StyledContainer","Container","SEO","description","lang","meta","title","site","metaDescription","siteMetadata","Helmet","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","BlogContent","query","BlogPostTemplate","data","Page","markdownRemark","frontmatter","excerpt","Card","card","className","dangerouslySetInnerHTML","__html","html","StyledCard","colors","ui","whisper","HeaderImage","Img","StyledTitle","brand","BlogPostInfo","black","InnerCard","Tag","white","accent","Tags","children","fluid","headerImg","childImageSharp","alt","date","timeToRead","tags","map","value","onClick","event","preventDefault","navigate","key"],"mappings":"yHAGMA,EAAkB,YAAOC,IAAP,qBAAH,0CAIND,O,2MCFTE,EAAM,SAAC,GAAuC,IAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC9BC,EAD0C,OAC1CA,KAeFC,EAAkBL,GAAeI,EAAKE,aAAaN,YACzD,OACE,YAACO,EAAA,OAAD,CACEC,eAAgB,CACdP,QAEFE,MAAOA,EACPM,cAAa,QAAUL,EAAKE,aAAaH,MACzCD,KAAM,CACJ,CACEQ,KAAM,cACNC,QAASN,GAEX,CACEO,SAAU,WACVD,QAASR,GAEX,CACES,SAAU,iBACVD,QAASN,GAEX,CACEO,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASP,EAAKE,aAAaO,OAAOH,MAEpC,CACEA,KAAM,gBACNC,QAASR,GAEX,CACEO,KAAM,sBACNC,QAASN,IAEXS,OAAOZ,MAIfH,EAAIgB,aAAe,CACjBd,KAAM,KACNC,KAAM,GACNF,YAAa,IAQAD,QClETiB,EAAc,mBAAH,kBAAG,GAyCPC,GAFEC,UAd2C,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACxD,YAAC,IAAD,KACE,YAACC,EAAA,EAAD,KACE,YAAC,EAAD,CAAKjB,MAAOgB,EAAKE,eAAeC,YAAYnB,MAAOH,YAAamB,EAAKE,eAAeE,UACpF,YAAC1B,EAAA,EAAD,KACE,YAAC2B,EAAA,EAAD,CAAMC,KAAMN,EAAKE,gBAEf,YAACL,EAAD,CAAaU,UAAU,cAAcC,wBAAyB,CAAEC,OAAQT,EAAKE,eAAeQ,aASjF,e,2SC5CfC,EAAa,mBAAH,mBAAG,CAAH,oBACIC,IAAOC,GAAGC,QADd,2GASVC,EAAc,YAAOC,IAAP,qBAAH,wGASXC,EAAc,kBAAH,mBAAG,CAAH,wGAQRL,IAAOM,MARC,KAWXC,EAAe,mBAAH,mBAAG,CAAH,SACTP,IAAOQ,MADE,2DAOZC,EAAY,mBAAH,mBAAG,CAAH,+EASTC,EAAM,mBAAH,mBAAG,CAAH,SACAV,IAAOW,MADP,mEAKWX,IAAOM,MALlB,8EAYaN,IAAOY,OAZpB,UAaEZ,IAAOM,MAbT,2BAkBHO,EAAO,mBAAH,mBAAG,CAAH,wGAqCKpB,IArBwB,SAAC,GAAkC,IAAhCC,EAAgC,EAAhCA,KAAMoB,EAA0B,EAA1BA,SAAUnB,EAAgB,EAAhBA,UACxD,OAAO,YAACI,EAAD,CAAYJ,UAAWA,GAC5B,YAACQ,EAAD,CAAaY,MAAK,MAAQrB,EAAKH,YAAYyB,UAAUC,gBAAgBF,MAASG,IAAI,KAClF,YAACT,EAAD,CAAWd,UAAU,aACnB,YAACU,EAAD,KAAcX,EAAKH,YAAYnB,OAC/B,YAACmC,EAAD,KACGb,EAAKH,YAAY4B,KADpB,MACkCzB,EAAK0B,WADvC,gBAGA,YAACP,EAAD,KACGnB,EAAKH,YAAY8B,KAAKC,KAAI,SAACC,GAC1B,OAAO,YAACb,EAAD,CAAKc,QAAS,SAACC,GACpBA,EAAMC,iBACNC,YAAS,cAAcJ,IACtBK,IAAKL,GAAQA,OAGnBT","file":"component---src-templates-blogpost-tsx-83050bf0909198d6e610.js","sourcesContent":["import styled from \"@emotion/styled\";\r\nimport Container from \"./Container\";\r\n\r\nconst StyledContainer = styled(Container)`\r\nmargin-top: 5rem;\r\n`;\r\n\r\nexport default StyledContainer;\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst SEO = ({ description, lang, meta, title }) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author {\r\n              name\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n  const metaDescription = description || site.siteMetadata.description\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata.author.name,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\nexport default SEO\r\n","import * as React from 'react'\r\nimport { graphql } from 'gatsby'\r\n\r\nimport Page from '../components/Page'\r\nimport IndexLayout from '../layouts'\r\nimport styled from '@emotion/styled'\r\nimport Card from '../components/Card'\r\nimport StyledContainer from '../components/StyledContainer'\r\nimport SEO from '../components/SEO'\r\n\r\n\r\nconst BlogContent = styled.div`\r\n`;\r\n\r\ninterface BlogPostTemplateProps {\r\n  data: {\r\n    site: {\r\n      siteMetadata: {\r\n        title: string\r\n        description: string\r\n        author: {\r\n          name: string\r\n          url: string\r\n        }\r\n      }\r\n    }\r\n    markdownRemark: {\r\n      html: string\r\n      excerpt: string\r\n      frontmatter: {\r\n        title: string\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst BlogPostTemplate: React.FC<BlogPostTemplateProps> = ({ data }) => (\r\n  <IndexLayout>\r\n    <Page>\r\n      <SEO title={data.markdownRemark.frontmatter.title} description={data.markdownRemark.excerpt} />\r\n      <StyledContainer>\r\n        <Card card={data.markdownRemark}>\r\n          {/* eslint-disable-next-line react/no-danger */}\r\n          <BlogContent className=\"BlogContent\" dangerouslySetInnerHTML={{ __html: data.markdownRemark.html }} />\r\n        </Card>\r\n      </StyledContainer>\r\n    </Page>\r\n  </IndexLayout>\r\n)\r\n\r\nexport default BlogPostTemplate\r\n\r\nexport const query = graphql`\r\n  query BlogPostTemplateQuery($slug: String!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n        author {\r\n          name\r\n          url\r\n        }\r\n      }\r\n    }\r\n    markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      html\r\n      excerpt(pruneLength: 380)\r\n      timeToRead\r\n      frontmatter {\r\n        title\r\n          date\r\n          tags\r\n          headerImg {\r\n            childImageSharp {\r\n              fluid {\r\n                ...GatsbyImageSharpFluid\r\n              }\r\n            }\r\n          }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\n","import * as React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nimport { Link, navigate } from 'gatsby'\r\nimport Img from \"gatsby-image\"\r\n\r\nimport { heights, dimensions, colors } from '../styles/variables'\r\n\r\nconst StyledCard = styled.div`\r\nbackground-color: ${colors.ui.whisper};\r\nborder-radius: .4rem;\r\noverflow: hidden;\r\nbox-shadow: 0 3rem 6rem rgba(0, 0, 0, .1);\r\nmargin: 5rem 0rem .3rem 0rem;\r\n`\r\n\r\n\r\nconst HeaderImage = styled(Img)`\r\nmax-height: 20rem;\r\nobject-fit: cover;\r\n\r\npicture>img {\r\n  transition: all 0.4s!important;\r\n}\r\n`;\r\n\r\nconst StyledTitle = styled.h1`\r\n@media (max-width: 768px) {\r\nfont-size: 1.5rem;\r\n}\r\n\r\nfont-size: 2.5rem;\r\nfont-weight: 500;\r\ntransition: .3s all;\r\ncolor: ${colors.brand};\r\n`;\r\n\r\nconst BlogPostInfo = styled.div`\r\ncolor: ${colors.black};\r\ndisplay: flex;\r\njustify-content: flex-end;\r\nfont-weight:400;\r\n`;\r\n\r\nconst InnerCard = styled.div`\r\npadding: 2rem;\r\n\r\n@media (max-width: 768px) {\r\n  padding: 1rem;\r\n  }\r\n`;\r\n\r\n\r\nconst Tag = styled.div`\r\ncolor: ${colors.white};\r\nborder: none;\r\nborder-radius: .4rem;\r\ndisplay: block;\r\nbackground-color: ${colors.brand};\r\nmargin: .25rem;\r\npadding: .1rem .5rem;\r\ncursor: pointer;\r\n\r\n\r\n&:hover {\r\n  background-color: ${colors.accent};\r\n  color: ${colors.brand};\r\n  text-decoration: none;\r\n}\r\n`;\r\n\r\nconst Tags = styled.div`\r\nflex-flow: wrap;\r\npadding-bottom: 2rem;\r\ndisplay: flex;\r\n\r\n& > div {\r\ntransition: .3s all;\r\n}\r\n\r\n`;\r\n\r\ninterface ContainerProps {\r\n  className?: string\r\n  card: any\r\n}\r\n\r\nconst Card: React.FC<ContainerProps> = ({ card, children, className }) => {\r\n  return <StyledCard className={className}>\r\n    <HeaderImage fluid={`../${card.frontmatter.headerImg.childImageSharp.fluid}`} alt=\"\" />\r\n    <InnerCard className=\"InnerCard\">\r\n      <StyledTitle>{card.frontmatter.title}</StyledTitle>\r\n      <BlogPostInfo>\r\n        {card.frontmatter.date} &#183; {card.timeToRead} min reading\r\n      </BlogPostInfo>\r\n      <Tags>\r\n        {card.frontmatter.tags.map((value: string) => {\r\n          return <Tag onClick={(event) => {\r\n            event.preventDefault();\r\n            navigate(`/blog/tags/${value}`)\r\n          }} key={value}>{value}</Tag>\r\n        })}\r\n      </Tags>\r\n      {children}\r\n    </InnerCard>\r\n  </StyledCard >\r\n}\r\n\r\nexport default Card\r\n"],"sourceRoot":""}