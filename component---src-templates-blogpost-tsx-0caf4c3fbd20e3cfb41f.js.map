{"version":3,"sources":["webpack:///./src/components/StyledContainer.tsx","webpack:///./src/templates/blogpost.tsx","webpack:///./src/components/Card.tsx"],"names":["StyledContainer","Container","BlogContent","BlogPostTemplate","data","card","markdownRemark","className","dangerouslySetInnerHTML","__html","html","query","StyledCard","colors","ui","whisper","HeaderImage","Img","StyledTitle","brand","BlogPostInfo","black","InnerCard","Tag","white","accent","Tags","Card","children","fluid","frontmatter","headerImg","childImageSharp","alt","title","date","timeToRead","tags","map","value","onClick","event","preventDefault","navigate","key"],"mappings":"yHAGMA,EAAkB,YAAOC,IAAP,qBAAH,0CAIND,O,uKCGTE,EAAc,mBAAH,kBAAG,GAsCLC,UAb2C,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACxD,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAMC,KAAMD,EAAKE,gBAEf,YAACJ,EAAD,CAAaK,UAAU,cAAcC,wBAAyB,CAAEC,OAAQL,EAAKE,eAAeI,aAS/F,IAAMC,EAAQ,c,uHC1CfC,EAAa,mBAAH,mBAAG,CAAH,oBACIC,IAAOC,GAAGC,QADd,2GASVC,EAAc,YAAOC,IAAP,qBAAH,wGASXC,EAAc,kBAAH,mBAAG,CAAH,wGAQRL,IAAOM,MARC,KAWXC,EAAe,mBAAH,mBAAG,CAAH,SACTP,IAAOQ,MADE,2DAOZC,EAAY,mBAAH,mBAAG,CAAH,+EASTC,EAAM,mBAAH,mBAAG,CAAH,SACAV,IAAOW,MADP,mEAKWX,IAAOM,MALlB,8EAYaN,IAAOY,OAZpB,UAaEZ,IAAOM,MAbT,2BAkBHO,EAAO,mBAAH,mBAAG,CAAH,wGAqCKC,IArBwB,SAAC,GAAkC,IAAhCtB,EAAgC,EAAhCA,KAAMuB,EAA0B,EAA1BA,SAAUrB,EAAgB,EAAhBA,UACxD,OAAO,YAACK,EAAD,CAAYL,UAAWA,GAC5B,YAACS,EAAD,CAAaa,MAAOxB,EAAKyB,YAAYC,UAAUC,gBAAgBH,MAAOI,IAAI,KAC1E,YAACX,EAAD,CAAWf,UAAU,aACnB,YAACW,EAAD,KAAcb,EAAKyB,YAAYI,OAC/B,YAACd,EAAD,KACGf,EAAKyB,YAAYK,KADpB,MACkC9B,EAAK+B,WADvC,gBAGA,YAACV,EAAD,KACGrB,EAAKyB,YAAYO,KAAKC,KAAI,SAACC,GAC1B,OAAO,YAAChB,EAAD,CAAKiB,QAAS,SAACC,GACpBA,EAAMC,iBACNC,YAAS,cAAcJ,IACtBK,IAAKL,GAAQA,OAGnBX","file":"component---src-templates-blogpost-tsx-0caf4c3fbd20e3cfb41f.js","sourcesContent":["import styled from \"@emotion/styled\";\r\nimport Container from \"./Container\";\r\n\r\nconst StyledContainer = styled(Container)`\r\nmargin-top: 5rem;\r\n`;\r\n\r\nexport default StyledContainer;\r\n","import * as React from 'react'\r\nimport { graphql } from 'gatsby'\r\n\r\nimport Page from '../components/Page'\r\nimport IndexLayout from '../layouts'\r\nimport styled from '@emotion/styled'\r\nimport Card from '../components/Card'\r\nimport StyledContainer from '../components/StyledContainer'\r\n\r\n\r\nconst BlogContent = styled.div`\r\n`;\r\n\r\ninterface BlogPostTemplateProps {\r\n  data: {\r\n    site: {\r\n      siteMetadata: {\r\n        title: string\r\n        description: string\r\n        author: {\r\n          name: string\r\n          url: string\r\n        }\r\n      }\r\n    }\r\n    markdownRemark: {\r\n      html: string\r\n      excerpt: string\r\n      frontmatter: {\r\n        title: string\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst BlogPostTemplate: React.FC<BlogPostTemplateProps> = ({ data }) => (\r\n  <IndexLayout>\r\n    <Page>\r\n      <StyledContainer>\r\n        <Card card={data.markdownRemark}>\r\n          {/* eslint-disable-next-line react/no-danger */}\r\n          <BlogContent className=\"BlogContent\" dangerouslySetInnerHTML={{ __html: data.markdownRemark.html }} />\r\n        </Card>\r\n      </StyledContainer>\r\n    </Page>\r\n  </IndexLayout>\r\n)\r\n\r\nexport default BlogPostTemplate\r\n\r\nexport const query = graphql`\r\n  query BlogPostTemplateQuery($slug: String!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n        author {\r\n          name\r\n          url\r\n        }\r\n      }\r\n    }\r\n    markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      html\r\n      excerpt(pruneLength: 380)\r\n      timeToRead\r\n      frontmatter {\r\n        title\r\n          date\r\n          tags\r\n          headerImg {\r\n            childImageSharp {\r\n              fluid {\r\n                ...GatsbyImageSharpFluid\r\n              }\r\n            }\r\n          }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\n","import * as React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nimport { Link, navigate } from 'gatsby'\r\nimport Img from \"gatsby-image\"\r\n\r\nimport { heights, dimensions, colors } from '../styles/variables'\r\n\r\nconst StyledCard = styled.div`\r\nbackground-color: ${colors.ui.whisper};\r\nborder-radius: .4rem;\r\noverflow: hidden;\r\nbox-shadow: 0 3rem 6rem rgba(0, 0, 0, .1);\r\nmargin: 5rem 0rem .3rem 0rem;\r\n`\r\n\r\n\r\nconst HeaderImage = styled(Img)`\r\nmax-height: 20rem;\r\nobject-fit: cover;\r\n\r\npicture>img {\r\n  transition: all 0.4s!important;\r\n}\r\n`;\r\n\r\nconst StyledTitle = styled.h1`\r\n@media (max-width: 768px) {\r\nfont-size: 1.5rem;\r\n}\r\n\r\nfont-size: 2.5rem;\r\nfont-weight: 500;\r\ntransition: .3s all;\r\ncolor: ${colors.brand};\r\n`;\r\n\r\nconst BlogPostInfo = styled.div`\r\ncolor: ${colors.black};\r\ndisplay: flex;\r\njustify-content: flex-end;\r\nfont-weight:400;\r\n`;\r\n\r\nconst InnerCard = styled.div`\r\npadding: 2rem;\r\n\r\n@media (max-width: 768px) {\r\n  padding: 1rem;\r\n  }\r\n`;\r\n\r\n\r\nconst Tag = styled.div`\r\ncolor: ${colors.white};\r\nborder: none;\r\nborder-radius: .4rem;\r\ndisplay: block;\r\nbackground-color: ${colors.brand};\r\nmargin: .25rem;\r\npadding: .1rem .5rem;\r\ncursor: pointer;\r\n\r\n\r\n&:hover {\r\n  background-color: ${colors.accent};\r\n  color: ${colors.brand};\r\n  text-decoration: none;\r\n}\r\n`;\r\n\r\nconst Tags = styled.div`\r\nflex-flow: wrap;\r\npadding-bottom: 2rem;\r\ndisplay: flex;\r\n\r\n& > div {\r\ntransition: .3s all;\r\n}\r\n\r\n`;\r\n\r\ninterface ContainerProps {\r\n  className?: string\r\n  card: any\r\n}\r\n\r\nconst Card: React.FC<ContainerProps> = ({ card, children, className }) => {\r\n  return <StyledCard className={className}>\r\n    <HeaderImage fluid={card.frontmatter.headerImg.childImageSharp.fluid} alt=\"\" />\r\n    <InnerCard className=\"InnerCard\">\r\n      <StyledTitle>{card.frontmatter.title}</StyledTitle>\r\n      <BlogPostInfo>\r\n        {card.frontmatter.date} &#183; {card.timeToRead} min reading\r\n      </BlogPostInfo>\r\n      <Tags>\r\n        {card.frontmatter.tags.map((value: string) => {\r\n          return <Tag onClick={(event) => {\r\n            event.preventDefault();\r\n            navigate(`/blog/tags/${value}`)\r\n          }} key={value}>{value}</Tag>\r\n        })}\r\n      </Tags>\r\n      {children}\r\n    </InnerCard>\r\n  </StyledCard >\r\n}\r\n\r\nexport default Card\r\n"],"sourceRoot":""}