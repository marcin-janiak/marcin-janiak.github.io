{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/components/Card.tsx","webpack:///./src/components/Teaser.tsx"],"names":["NavLink","Link","colors","ui","light","IndexPage","data","allMarkdownRemark","edges","map","edge","key","node","fields","slug","to","className","card","excerpt","query","StyledCard","whisper","HeaderImage","Img","StyledTitle","brand","BlogPostInfo","black","InnerCard","Tag","white","accent","Tags","Card","children","fixed","frontmatter","headerImg","childImageSharp","alt","title","date","timeToRead","tags","value","onClick","event","preventDefault","navigate","Teaser"],"mappings":"oQAWMA,EAAU,YAAOC,IAAP,qBAAH,sHAQUC,IAAOC,GAAGC,MARpB,2FAmCEC,UAlBG,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAChB,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,KACGA,EAAKC,kBAAkBC,MAAMC,KAAI,SAACC,GACjC,OAAO,YAACV,EAAD,CAASW,IAAKD,EAAKE,KAAKC,OAAOC,KAAMC,GAAIL,EAAKE,KAAKC,OAAOC,MAC/D,YAAC,IAAD,CAAME,UAAU,aAAaC,KAAMP,EAAKE,MACtC,YAAC,IAAD,KAASF,EAAKE,KAAKM,kBAa1B,IAAMC,EAAQ,c,iICxCfC,EAAa,mBAAH,mBAAG,CAAH,oBACIlB,IAAOC,GAAGkB,QADd,2GASVC,EAAc,YAAOC,IAAP,qBAAH,wGASXC,EAAc,kBAAH,mBAAG,CAAH,wGAQRtB,IAAOuB,MARC,KAWXC,EAAe,mBAAH,mBAAG,CAAH,SACTxB,IAAOyB,MADE,2DAOZC,EAAY,mBAAH,mBAAG,CAAH,+EASTC,EAAM,mBAAH,mBAAG,CAAH,SACA3B,IAAO4B,MADP,mEAKW5B,IAAOuB,MALlB,8EAYavB,IAAO6B,OAZpB,UAaE7B,IAAOuB,MAbT,2BAkBHO,EAAO,mBAAH,mBAAG,CAAH,wGAqCKC,IArBwB,SAAC,GAAkC,IAAhChB,EAAgC,EAAhCA,KAAMiB,EAA0B,EAA1BA,SAAUlB,EAAgB,EAAhBA,UACxD,OAAO,YAACI,EAAD,CAAYJ,UAAWA,GAC5B,YAACM,EAAD,CAAaa,MAAOlB,EAAKmB,YAAYC,UAAUC,gBAAgBH,MAAOI,IAAI,KAC1E,YAACX,EAAD,CAAWZ,UAAU,aACnB,YAACQ,EAAD,KAAcP,EAAKmB,YAAYI,OAC/B,YAACd,EAAD,KACGT,EAAKmB,YAAYK,KADpB,MACkCxB,EAAKyB,WADvC,gBAGA,YAACV,EAAD,KACGf,EAAKmB,YAAYO,KAAKlC,KAAI,SAACmC,GAC1B,OAAO,YAACf,EAAD,CAAKgB,QAAS,SAACC,GACpBA,EAAMC,iBACNC,YAAS,cAAcJ,IACtBjC,IAAKiC,GAAQA,OAGnBV,M,8DCpGDe,EAAS,mBAAH,mBAAG,CAAH,0CAGH/C,IAAOyB,MAHJ,0BAOGsB","file":"component---src-pages-index-tsx-f019c401155b30096a44.js","sourcesContent":["import * as React from 'react'\r\nimport { Link, graphql } from 'gatsby'\r\n\r\nimport Page from '../components/Page'\r\nimport Container from '../components/Container'\r\nimport IndexLayout from '../layouts'\r\nimport Card from '../components/Card'\r\nimport styled from '@emotion/styled'\r\nimport Teaser from '../components/Teaser'\r\nimport { colors } from '../styles/variables'\r\n\r\nconst NavLink = styled(Link)`\r\ntext-decoration:none;\r\n &:hover {\r\n    text-decoration:none;\r\n }\r\n\r\n &:hover .StyledCard {\r\n   transform: translateY(-.5%);\r\n   background-color: ${colors.ui.light};\r\n   box-shadow: 0 4rem 8rem rgba(0, 0, 0, .2);\r\n }\r\n\r\n &:hover img {\r\n  transform: scale(1.3) rotate(3deg);\r\n }\r\n`;\r\n\r\nconst IndexPage = ({ data }) => (\r\n  <IndexLayout>\r\n    <Page>\r\n      <Container>\r\n        {data.allMarkdownRemark.edges.map((edge: any) => {\r\n          return <NavLink key={edge.node.fields.slug} to={edge.node.fields.slug}>\r\n            <Card className=\"StyledCard\" card={edge.node} >\r\n              <Teaser>{edge.node.excerpt}</Teaser>\r\n            </Card>\r\n          </NavLink>\r\n        })}\r\n      </Container>\r\n    </Page>\r\n  </IndexLayout >\r\n)\r\n\r\n\r\n\r\nexport default IndexPage\r\n\r\nexport const query = graphql`query getBlogPosts {\r\n  allMarkdownRemark(filter: {fields: {layout: {eq: \"blogpost\"}}, rawMarkdownBody: {}, internal: {}}, sort: {fields: frontmatter___date, order: DESC}) {\r\n    edges {\r\n      node {\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          title\r\n          date\r\n          tags\r\n          headerImg {\r\n            childImageSharp {\r\n              fixed(width:960, height:360) {\r\n                ...GatsbyImageSharpFixed\r\n              }\r\n            }\r\n          }\r\n        }\r\n        timeToRead\r\n        excerpt(pruneLength: 380)\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\n\r\n","import * as React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nimport { Link, navigate } from 'gatsby'\r\nimport Img from \"gatsby-image\"\r\n\r\nimport { heights, dimensions, colors } from '../styles/variables'\r\n\r\nconst StyledCard = styled.div`\r\nbackground-color: ${colors.ui.whisper};\r\nborder-radius: .4rem;\r\noverflow: hidden;\r\nbox-shadow: 0 3rem 6rem rgba(0, 0, 0, .1);\r\nmargin: 5rem 0rem .3rem 0rem;\r\n`\r\n\r\n\r\nconst HeaderImage = styled(Img)`\r\nmax-height: 20rem;\r\nobject-fit: cover;\r\n\r\npicture>img {\r\n  transition: all 0.4s!important;\r\n}\r\n`;\r\n\r\nconst StyledTitle = styled.h1`\r\n@media (max-width: 768px) {\r\nfont-size: 1.5rem;\r\n}\r\n\r\nfont-size: 2.5rem;\r\nfont-weight: 500;\r\ntransition: .3s all;\r\ncolor: ${colors.brand};\r\n`;\r\n\r\nconst BlogPostInfo = styled.div`\r\ncolor: ${colors.black};\r\ndisplay: flex;\r\njustify-content: flex-end;\r\nfont-weight:400;\r\n`;\r\n\r\nconst InnerCard = styled.div`\r\npadding: 2rem;\r\n\r\n@media (max-width: 768px) {\r\n  padding: 1rem;\r\n  }\r\n`;\r\n\r\n\r\nconst Tag = styled.div`\r\ncolor: ${colors.white};\r\nborder: none;\r\nborder-radius: .4rem;\r\ndisplay: block;\r\nbackground-color: ${colors.brand};\r\nmargin: .25rem;\r\npadding: .1rem .5rem;\r\ncursor: pointer;\r\n\r\n\r\n&:hover {\r\n  background-color: ${colors.accent};\r\n  color: ${colors.brand};\r\n  text-decoration: none;\r\n}\r\n`;\r\n\r\nconst Tags = styled.div`\r\nflex-flow: wrap;\r\npadding-bottom: 2rem;\r\ndisplay: flex;\r\n\r\n& > div {\r\ntransition: .3s all;\r\n}\r\n\r\n`;\r\n\r\ninterface ContainerProps {\r\n  className?: string\r\n  card: any\r\n}\r\n\r\nconst Card: React.FC<ContainerProps> = ({ card, children, className }) => {\r\n  return <StyledCard className={className}>\r\n    <HeaderImage fixed={card.frontmatter.headerImg.childImageSharp.fixed} alt=\"\" />\r\n    <InnerCard className=\"InnerCard\">\r\n      <StyledTitle>{card.frontmatter.title}</StyledTitle>\r\n      <BlogPostInfo>\r\n        {card.frontmatter.date} &#183; {card.timeToRead} min reading\r\n      </BlogPostInfo>\r\n      <Tags>\r\n        {card.frontmatter.tags.map((value: string) => {\r\n          return <Tag onClick={(event) => {\r\n            event.preventDefault();\r\n            navigate(`/blog/tags/${value}`)\r\n          }} key={value}>{value}</Tag>\r\n        })}\r\n      </Tags>\r\n      {children}\r\n    </InnerCard>\r\n  </StyledCard >\r\n}\r\n\r\nexport default Card\r\n","import styled from \"@emotion/styled\";\r\nimport { colors } from \"../styles/variables\";\r\n\r\nconst Teaser = styled.div`\r\nfont-size: 1.2rem;\r\nline-height: 1.7;\r\ncolor: ${colors.black};\r\nmargin-bottom: 2.5rem;\r\n`;\r\n\r\nexport default Teaser;\r\n"],"sourceRoot":""}